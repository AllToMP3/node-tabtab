#!/usr/bin/env node
var completion = require('../lib/completion');

// this file is mainly just an example of usage

// test with nopt options
var noptions = require('../examples/nopt/nopt'),
  opts = Object.keys(noptions.opts),
  alias = Object.keys(noptions.alias),
  all = opts.concat(alias);

// test with commander options
var program = require('../examples/commander/pizza'),
  short = program.options.map(function(opt) { return opt.short.replace(/-/g, ''); }),
  long = program.options.map(function(opt) { return opt.long.replace(/-/g, ''); }),
  commanderAll = short.concat(long);

// test with optimist options, this one is a little bit harder.
// no easy way to get optimist's options, other than parsing the showHelp
var optimist = require('../examples/optimist/usage-options'),
  optimistFlags = parseOut(optimist.help()),
  optimistShorts = optimistFlags.shorts.map(function(it) { return it.replace(/-/g, ''); }),
  optimistLongs = optimistFlags.longs.map(function(it) { return it.replace(/-/g, ''); }),
  optimistAll = optimistShorts.concat(optimistLongs);

// completion for cake script: will be basically the same as optimist's, but
// without the API to get the cake tasks output (eg. calling cake without tasks)
//
// will probably have to spawn process, parse stdout and automcomplete on this.

// pass the module name, will change to module
// reference + dir walk to find a package.json
completion.complete('pkgrc', function(err, o) {
  if(err || !o) return;

  // options:
  // - line: the full line from compgen
  // - partial: the partial line, part of the line where the cursor is
  // - words: the word counter, a number mapping the number of words from compgen
  // - point: cursor offset

  //
  // Setting completion output is simply a matter of writing to the console
  //

  // console.log(o.line);
  // console.log(o.partial);
  // console.log(o.words);
  // console.log(o.point);
  // console.log(o.last);
  // console.log(o.lastPartial);

  if(o.last === 'hello') {
    return console.log('World');
  }

  if(o.last === 'js') {
    return console.log('javascript');
  }

  if(o.prev === 'optimist') {
    if(/^--\w?/.test(o.last)) return log(optimistLongs, o, '--');
    if(/^-\w?/.test(o.last)) return log(optimistShorts, o, '-');
    return log(optimistAll, o);
  }

  if(o.prev === 'commander') {
    if(/^--\w?/.test(o.last)) return log(long, o, '--');
    if(/^-\w?/.test(o.last)) return log(short, o, '-');
    return log(commanderAll, o);
  }

  // basic config - and -- catch up
  if(/^--\w?/.test(o.last) && o.prev !== 'commander') {
    return log(opts, o, '--');
  }

  if(/^-\w?/.test(o.last) && o.prev !== 'commander') {
    return log(alias, o, '-');
  }

  if(o.prev === 'config' || o.last === 'config') {
    return log(all, o);
  }

  return log('hello js config commander optimist'.split(' '), o);
});

function log(arr, o, prefix) {
  prefix = prefix || '';
  arr = Array.isArray(arr) ? arr : [arr];
  arr.filter(abbrev(o)).forEach(function(v) {
    console.log(prefix + v);
  });
}

function abbrev(o) { return function(it) {
  return new RegExp('^' + o.last.replace(/-/g, '')).test(it);
}}

// Parse a help output, especially usefull for
// cli tool that don't provide an easy way to get configured
// options in their API. Namely the case of optimist. Handy for cake
// files too.
//
// It basically parse the help output, and return an object
// mapping each -short and --long options it might find.
//
function parseOut(str) {
  var shorts = str.match(/\s-\w+/g);
  var longs = str.match(/\s--\w+/g);

  return {
    shorts: shorts.map(trim),
    longs: longs.map(trim)
  };
}

function trim (s) {
  return s.trim();
}
